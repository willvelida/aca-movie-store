name: Deploy Catalog API Service

env:
  DOTNET_VERSION: '6.0.x'

on:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Sign into Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Lint Bicep
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az bicep build --file ./src/MovieStore.Catalog/MovieStore.Catalog.Infrastructure/main.bicep

  validate:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Sign into Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get existing catalog image
        id: getimages
        run: |
          echo "Installing containerapp extension"
          az extension add -n containerapp --yes
          catalogImage=$(az containerapp show --name movie-catalog --resource-group ${{ secrets.AZURE_RG }} --query "properties.template.containers[0].image" -o tsv)  
          echo "::set-output name=catalogImage::$catalogImage"

      - name: Run preflight validation
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: ./src/MovieStore.Catalog/MovieStore.Catalog.Infrastructure/main.bicep
          deploymentMode: Validate
          parameters: webAppImage=${{ steps.getimages.outputs.webImage }}

  preview:
    needs: [lint, validate]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        name: Sign into Azure
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get existing catalog image
        id: getimages
        run: |
          echo "Installing containerapp extension"
          az extension add -n containerapp --yes
          catalogImage=$(az containerapp show --name movie-catalog --resource-group ${{ secrets.AZURE_RG }} --query "properties.template.containers[0].image" -o tsv)  
          echo "::set-output name=catalogImage::$catalogImage"
      
      - uses: Azure/cli@v1
        name: Run what-if
        with:
          inlineScript: |
            az deployment group what-if --resource-group ${{ secrets.AZURE_RG }} --template-file ./src/MovieStore.Catalog/MovieStore.Catalog.Infrastructure/main.bicep --parameters webAppImage=${{ steps.getimages.outputs.webImage }}     

  deploy-infra:
    runs-on: ubuntu-latest
    environment: Production
    needs: preview
    steps:
      - uses: actions/checkout@v2

      - name: Sign into Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get existing catalog image
        id: getimages
        run: |
          echo "Installing containerapp extension"
          az extension add -n containerapp --yes
          catalogImage=$(az containerapp show --name movie-catalog --resource-group ${{ secrets.AZURE_RG }} --query "properties.template.containers[0].image" -o tsv)  
          echo "::set-output name=catalogImage::$catalogImage"

      - name: Deploy Bicep Template
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: ./src/MovieStore.Catalog/MovieStore.Catalog.Infrastructure/main.bicep
          deploymentMode: Incremental
          parameters: webAppImage=${{ steps.getimages.outputs.webImage }}

  build-api-project:
    runs-on: ubuntu-latest
    needs: deploy-infra
    defaults:
      run:
        working-directory: './src/MovieStore.Catalog'
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main
      - name: 'Setup dotnet'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: 'Install Dependencies'
        run: dotnet restore
      - name: 'Build project'
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test --no-build --verbosity normal  --logger trx   
  
  build-container-image:
    runs-on: ubuntu-latest
    needs: [build-api-project]
    defaults:
      run:
        working-directory: './src/MovieStore.Catalog'
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main
      
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        
      - name: Get ACR name
        id: getacrname
        run: |
          acrName=$(az acr list --resource-group ${{ secrets.AZURE_RG }} --query "[0].name" -o tsv)
          echo "::set-output name=acrName::$acrName"
      
      - name: Get ACR Credentials
        id: getacrcreds
        run: |
          loginServer=$(az acr list --resource-group ${{ secrets.AZURE_RG }} --query "[0].loginServer" -o tsv)
          loginName=$(az acr credential show -n ${{ steps.getacrname.outputs.acrName }} --resource-group ${{ secrets.AZURE_RG }} --query username -o tsv)
          password=$(az acr credential show -n ${{ steps.getacrname.outputs.acrName }} --resource-group ${{ secrets.AZURE_RG }} --query "passwords[0].value" -o tsv)
          echo "::set-output name=loginServer::$loginServer"
          echo "::set-output name=loginName::$loginName"
          echo "::set-output name=password::$password"
      - name: 'Build and Push API Image to ACR'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ steps.getacrcreds.outputs.loginServer }}
          username: ${{ steps.getacrname.outputs.acrName }}
          password: ${{ steps.getacrcreds.outputs.password }}
      - run: |
          docker build . -t ${{ steps.getacrcreds.outputs.loginServer }}/movie-store-catalog:${{ github.sha }}
          docker push ${{ steps.getacrcreds.outputs.loginServer }}/movie-store-catalog:${{ github.sha }}
  deploy-api-image:
    runs-on: ubuntu-latest
    needs: build-container-image
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get ACR Login Server
        id: getacrserver
        run: |
          loginServer=$(az acr list --resource-group ${{ secrets.AZURE_RG }} --query "[0].loginServer" -o tsv)
          echo "::set-output name=loginServer::$loginServer"
      - name: 'Deploy Container App'
        uses: Azure/cli@v1
        with:
          inlineScript: |
            echo "Installing containerapp extension"
            az extension add -n containerapp --yes
            echo "Starting Deploying"
            az containerapp update -n movie-catalog -g ${{ secrets.AZURE_RG }} -i ${{ steps.getacrserver.outputs.loginServer }}/movie-store-catalog:${{ github.sha }} --debug